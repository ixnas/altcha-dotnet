using System;
using Ixnas.AltchaNet.Debug;
using Ixnas.AltchaNet.Exceptions;
using Ixnas.AltchaNet.Internal;
using Ixnas.AltchaNet.Internal.Converters;
using Ixnas.AltchaNet.Internal.Cryptography;
using Ixnas.AltchaNet.Internal.Response;
using Ixnas.AltchaNet.Internal.Salt;
using Ixnas.AltchaNet.Internal.Serialization;
using Ixnas.AltchaNet.Internal.SpamFilter;

namespace Ixnas.AltchaNet
{
    /// <summary>
    ///     Builds the service that can validate ALTCHA challenges generated by the ALTCHA project's own API.
    /// </summary>
    public sealed class AltchaApiServiceBuilder
    {
        private readonly BytesStringConverter _bytesStringConverter = new BytesStringConverter();
        private readonly Clock _clock = new DefaultClock();
        private readonly byte[] _key;
        private readonly double _maxSpamFilterScore = Defaults.MaxSpamFilterScore;
        private readonly IAltchaChallengeStore _store;
        private readonly bool _useInMemoryStore;

        internal AltchaApiServiceBuilder()
        {
        }

        private AltchaApiServiceBuilder(byte[] key,
                                        bool useInMemoryStore,
                                        IAltchaChallengeStore store,
                                        Clock clock,
                                        double maxSpamFilterScore)
        {
            _key = key;
            _useInMemoryStore = useInMemoryStore;
            _store = store;
            _clock = clock;
            _maxSpamFilterScore = maxSpamFilterScore;
        }

        /// <summary>
        ///     Returns a new configured service instance.
        /// </summary>
        public AltchaApiService Build()
        {
            if (!_useInMemoryStore && _store == null)
                throw new MissingStoreException();
            if (_key == null)
                throw new MissingApiSecretException();
            var store = _store ?? new InMemoryStore(_clock);
            var serializer = new SystemTextJsonSerializer();
            var cryptoAlgorithm = new Sha256CryptoAlgorithm(_key);
            var saltParser = new ApiSaltParser();
            var challengeStringToBytesConverter =
                new ApiChallengeStringToBytesConverter(_bytesStringConverter);
            var responseValidator = new ResponseValidator(store,
                                                          serializer,
                                                          saltParser,
                                                          _bytesStringConverter,
                                                          cryptoAlgorithm,
                                                          _clock,
                                                          challengeStringToBytesConverter);
            var spamFilterValidator =
                new SpamFilterValidator(serializer,
                                        cryptoAlgorithm,
                                        _bytesStringConverter,
                                        _clock,
                                        store,
                                        _maxSpamFilterScore);
            return new AltchaApiService(responseValidator, spamFilterValidator);
        }

        /// <summary>
        ///     (Required) Configures the API secret used to validate challenges from ALTCHA's API.
        /// </summary>
        /// <param name="apiSecret">The key to use. Starts with "sec_" or "csec_".</param>
        /// <returns>A new instance of the builder with the updated configuration.</returns>
        public AltchaApiServiceBuilder UseApiSecret(string apiSecret)
        {
            if (string.IsNullOrWhiteSpace(apiSecret))
                throw new InvalidApiSecretException();

            if (!apiSecret.StartsWith("csec_") && !apiSecret.StartsWith("sec_"))
                throw new InvalidApiSecretException();

            var key = _bytesStringConverter.GetByteArrayFromUtf8String(apiSecret);
            return new AltchaApiServiceBuilder(key,
                                               _useInMemoryStore,
                                               _store,
                                               _clock,
                                               _maxSpamFilterScore);
        }

        /// <summary>
        ///     Configures a simple in-memory store for previously verified ALTCHA responses. Should only be used for testing
        ///     purposes.
        /// </summary>
        /// <returns>A new instance of the builder with the updated configuration.</returns>
        public AltchaApiServiceBuilder UseInMemoryStore()
        {
            return new AltchaApiServiceBuilder(_key,
                                               true,
                                               null,
                                               _clock,
                                               _maxSpamFilterScore);
        }

        /// <summary>
        ///     (Required) Configures a store to use for previously verified ALTCHA responses. Used to prevent replay attacks.
        /// </summary>
        /// <param name="store">Store to use.</param>
        /// <returns>A new instance of the builder with the updated configuration.</returns>
        public AltchaApiServiceBuilder UseStore(IAltchaChallengeStore store)
        {
            if (store == null)
                throw new ArgumentNullException();
            return new AltchaApiServiceBuilder(_key,
                                               _useInMemoryStore,
                                               store,
                                               _clock,
                                               _maxSpamFilterScore);
        }

        /// <summary>
        ///     (Optional) Overrides the default maximum score that a spam filtered form may have before it's rejected.
        /// </summary>
        /// <param name="maxScore">The maximum score (default 2)</param>
        /// <returns>A new instance of the builder with the updated configuration.</returns>
        public AltchaApiServiceBuilder SetMaxSpamFilterScore(double maxScore)
        {
            if (maxScore <= 0)
                throw new InvalidMaxSpamFilterScoreException();
            return new AltchaApiServiceBuilder(_key,
                                               _useInMemoryStore,
                                               _store,
                                               _clock,
                                               maxScore);
        }

#if DEBUG
        /// <summary>
        ///     DEBUG ONLY: Provide an alternative clock implementation. Used for testing time based logic.
        /// </summary>
        /// <param name="clock">An alternative clock implementation.</param>
        /// <returns>A new instance of the builder with the updated configuration.</returns>
        public AltchaApiServiceBuilder UseClock(Clock clock)
        {
            return new AltchaApiServiceBuilder(_key,
                                               _useInMemoryStore,
                                               _store,
                                               clock,
                                               _maxSpamFilterScore);
        }
#endif
    }
}
