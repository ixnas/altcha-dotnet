using System;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Ixnas.AltchaNet.Internal.ProofOfWork;
using Ixnas.AltchaNet.Internal.SpamFilter;

namespace Ixnas.AltchaNet
{
    /// <summary>
    ///     Service used for validating challenges generated by the ALTCHA project's own API.
    /// </summary>
    public sealed class AltchaApiService
    {
        private readonly ResponseValidator _responseValidator;
        private readonly SpamFilterValidator _spamFilterValidator;

        internal AltchaApiService(ResponseValidator responseValidator,
                                  SpamFilterValidator spamFilterValidator)
        {
            _responseValidator = responseValidator;
            _spamFilterValidator = spamFilterValidator;
        }

        /// <summary>
        ///     Validates a solved ALTCHA challenge response.
        /// </summary>
        /// <param name="altchaBase64">A base64-encoded ALTCHA response, typically a form field named "altcha".</param>
        /// <returns>A result object representing the result of the validation.</returns>
        public async Task<AltchaValidationResult> Validate(string altchaBase64)
        {
            return await _responseValidator.Validate(altchaBase64);
        }

        /// <summary>
        ///     Validates a form that was processed through the ALTCHA project's spam filter API.
        /// </summary>
        /// <param name="form">
        ///     A form object with public properties as form fields to validate. Must contain a string property
        ///     named Altcha containing the verification data.
        /// </param>
        /// <param name="altchaSelector">(Optional) Expression to select a different property than the default "Altcha" property.</param>
        /// <typeparam name="T">The concrete type of the form.</typeparam>
        /// <returns></returns>
        public async Task<AltchaSpamFilteredValidationResult> ValidateSpamFilteredForm<T>(
            T form,
            Expression<Func<T, string>> altchaSelector = null)
        {
            return await _spamFilterValidator.ValidateSpamFilteredForm(form, altchaSelector);
        }
    }
}
